
DA4BT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072d  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b7  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_init>:
	}
}

void adc_init (void)
{
	ADMUX = (1<<REFS0);						//reference selection; AVcc
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	ADCSRA |= (1<<ADEN) |                   //enable ADC
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	87 6c       	ori	r24, 0xC7	; 199
  8e:	80 83       	st	Z, r24
	          (1<<ADSC) |
			  (1<<ADPS2) |                   //prescalar 128
	          (1<<ADPS1) |
	          (1<<ADPS0);
	ADCSRB = 0x0;							//adc control and status register free running mode
  90:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  94:	08 95       	ret

00000096 <main>:
{
	
	while(1)
	{
		//Timer1
		TCCR1A = (1 << COM1A1) | (1<<COM1B1) | (1<<WGM11);
  96:	68 94       	set
  98:	aa 24       	eor	r10, r10
  9a:	a7 f8       	bld	r10, 7
  9c:	b1 2c       	mov	r11, r1
  9e:	0f 2e       	mov	r0, r31
  a0:	f2 ea       	ldi	r31, 0xA2	; 162
  a2:	6f 2e       	mov	r6, r31
  a4:	f0 2d       	mov	r31, r0
		TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);	//set prescalar to 64
  a6:	0f 2e       	mov	r0, r31
  a8:	f1 e8       	ldi	r31, 0x81	; 129
  aa:	cf 2e       	mov	r12, r31
  ac:	d1 2c       	mov	r13, r1
  ae:	f0 2d       	mov	r31, r0
  b0:	0f 2e       	mov	r0, r31
  b2:	fb e1       	ldi	r31, 0x1B	; 27
  b4:	7f 2e       	mov	r7, r31
  b6:	f0 2d       	mov	r31, r0
		
		adc_init();
      
		ICR1=4999;              //50Hz
  b8:	0f 2e       	mov	r0, r31
  ba:	f6 e8       	ldi	r31, 0x86	; 134
  bc:	ef 2e       	mov	r14, r31
  be:	f1 2c       	mov	r15, r1
  c0:	f0 2d       	mov	r31, r0
  c2:	07 e8       	ldi	r16, 0x87	; 135
  c4:	13 e1       	ldi	r17, 0x13	; 19
		DDRB |= (1<<PB1);		//output pin to the servo motor
		OCR1A = ADC;            //for potentiometer
  c6:	c8 e7       	ldi	r28, 0x78	; 120
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	0f 2e       	mov	r0, r31
  cc:	f8 e8       	ldi	r31, 0x88	; 136
  ce:	8f 2e       	mov	r8, r31
  d0:	91 2c       	mov	r9, r1
  d2:	f0 2d       	mov	r31, r0
{
	
	while(1)
	{
		//Timer1
		TCCR1A = (1 << COM1A1) | (1<<COM1B1) | (1<<WGM11);
  d4:	f5 01       	movw	r30, r10
  d6:	60 82       	st	Z, r6
		TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);	//set prescalar to 64
  d8:	f6 01       	movw	r30, r12
  da:	70 82       	st	Z, r7
		
		adc_init();
  dc:	0e 94 40 00 	call	0x80	; 0x80 <adc_init>
      
		ICR1=4999;              //50Hz
  e0:	f7 01       	movw	r30, r14
  e2:	11 83       	std	Z+1, r17	; 0x01
  e4:	00 83       	st	Z, r16
		DDRB |= (1<<PB1);		//output pin to the servo motor
  e6:	21 9a       	sbi	0x04, 1	; 4
		OCR1A = ADC;            //for potentiometer
  e8:	88 81       	ld	r24, Y
  ea:	99 81       	ldd	r25, Y+1	; 0x01
  ec:	f4 01       	movw	r30, r8
  ee:	91 83       	std	Z+1, r25	; 0x01
  f0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ff ef       	ldi	r31, 0xFF	; 255
  f4:	20 e7       	ldi	r18, 0x70	; 112
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	f1 50       	subi	r31, 0x01	; 1
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x62>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x6c>
 102:	00 00       	nop
 104:	e7 cf       	rjmp	.-50     	; 0xd4 <main+0x3e>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
