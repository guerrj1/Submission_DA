
DA4BT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c2  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000635  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b8  00000000  00000000  00000f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001586  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 56 00 	call	0xac	; 0xac <main>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
	}
}

void adc_init (void)
{
	DIDR0 = 0x1;							//digital input disable
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX = (1<<REFS0);						//reference selection; AVcc
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	ADCSRA |= (1<<ADEN) |                   //enable ADC
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	87 68       	ori	r24, 0x87	; 135
  a4:	80 83       	st	Z, r24
	         (1<<ADPS2) |                   //prescalar 128
	         (1<<ADPS1) | 
			 (1<<ADPS0);				
	ADCSRB = 0x0;							//adc control and status register free running mode
  a6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  aa:	08 95       	ret

000000ac <main>:
volatile unsigned int ADCVal;			 //variable that the ADC value is stored in
void adc_init(void);

int main(void)
{
	DDRB = 0x0F;							//PB0-PB3 as output
  ac:	8f e0       	ldi	r24, 0x0F	; 15
  ae:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;								//set portc as input
  b0:	17 b8       	out	0x07, r1	; 7
	PORTB = 0;								//turns off portb
  b2:	15 b8       	out	0x05, r1	; 5
	//Timer
	TCCR1B = (1 << WGM12) | (1 << CS11);	//set prescalar to 8
  b4:	8a e0       	ldi	r24, 0x0A	; 10
  b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	adc_init();
  ba:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	
	while(1)
	{
		ADCSRA |= (1 << ADSC);			//start adc conversion
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);	//wait for conversion to finish 
		ADCVal = ADC & 0x03FF;			//read ADCH and ADCL
  c2:	c8 e7       	ldi	r28, 0x78	; 120
  c4:	d0 e0       	ldi	r29, 0x00	; 0
		OCR1A = 10*ADCVal;				//duty cycle for PWM 
  c6:	a8 e8       	ldi	r26, 0x88	; 136
  c8:	b0 e0       	ldi	r27, 0x00	; 0

		PORTB = 0x09;
  ca:	79 e0       	ldi	r23, 0x09	; 9
		while(!(TIFR1 & (1<<OCF1A)));  //delay
		TIFR1 |= (1 << OCF1A);         //reset flag
		PORTB = 0x03;
  cc:	63 e0       	ldi	r22, 0x03	; 3
		while(!(TIFR1 & (1<<OCF1A)));   //delay 
		TIFR1 |= (1 << OCF1A);          //reset flag
		PORTB = 0x06;
  ce:	56 e0       	ldi	r21, 0x06	; 6
		while(!(TIFR1 & (1<<OCF1A)));   //delay
		TIFR1 |= (1 << OCF1A);          //reset flag
		PORTB = 0x0C;
  d0:	4c e0       	ldi	r20, 0x0C	; 12
	
	adc_init();
	
	while(1)
	{
		ADCSRA |= (1 << ADSC);			//start adc conversion
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);	//wait for conversion to finish 
  d8:	80 81       	ld	r24, Z
  da:	84 ff       	sbrs	r24, 4
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <main+0x2c>
		ADCVal = ADC & 0x03FF;			//read ADCH and ADCL
  de:	88 81       	ld	r24, Y
  e0:	99 81       	ldd	r25, Y+1	; 0x01
  e2:	93 70       	andi	r25, 0x03	; 3
  e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		OCR1A = 10*ADCVal;				//duty cycle for PWM 
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	9c 01       	movw	r18, r24
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	82 0f       	add	r24, r18
 108:	93 1f       	adc	r25, r19
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	9c 93       	st	X, r25
 10e:	8e 93       	st	-X, r24

		PORTB = 0x09;
 110:	75 b9       	out	0x05, r23	; 5
		while(!(TIFR1 & (1<<OCF1A)));  //delay
 112:	b1 9b       	sbis	0x16, 1	; 22
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x66>
		TIFR1 |= (1 << OCF1A);         //reset flag
 116:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x03;
 118:	65 b9       	out	0x05, r22	; 5
		while(!(TIFR1 & (1<<OCF1A)));   //delay 
 11a:	b1 9b       	sbis	0x16, 1	; 22
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x6e>
		TIFR1 |= (1 << OCF1A);          //reset flag
 11e:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x06;
 120:	55 b9       	out	0x05, r21	; 5
		while(!(TIFR1 & (1<<OCF1A)));   //delay
 122:	b1 9b       	sbis	0x16, 1	; 22
 124:	fe cf       	rjmp	.-4      	; 0x122 <main+0x76>
		TIFR1 |= (1 << OCF1A);          //reset flag
 126:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x0C;
 128:	45 b9       	out	0x05, r20	; 5
		while(!(TIFR1 & (1<<OCF1A)));   //delay
 12a:	b1 9b       	sbis	0x16, 1	; 22
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0x7e>
		TIFR1 |= (1 << OCF1A);          //reset flag
 12e:	b1 9a       	sbi	0x16, 1	; 22
	}
 130:	d0 cf       	rjmp	.-96     	; 0xd2 <main+0x26>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
