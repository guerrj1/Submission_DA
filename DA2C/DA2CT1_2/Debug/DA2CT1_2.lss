
DA2CT1_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000248  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB |= (1<<2);                    //sets pb2 as input
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<2);                   //sets pb2 to high for LED
  82:	2a 9a       	sbi	0x05, 2	; 5
	DDRC &= (0<<2);                    //sets PC2 to input
  84:	87 b1       	in	r24, 0x07	; 7
  86:	17 b8       	out	0x07, r1	; 7
	PORTC |= (0<<2);                   //sets PC2 to low 0
  88:	88 b1       	in	r24, 0x08	; 8
  8a:	88 b9       	out	0x08, r24	; 8
	
	TCCR0A = 0;                         
  8c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1<<CS02) | (1<<CS00);     //sets prescaler to 1024
  8e:	85 e0       	ldi	r24, 0x05	; 5
  90:	85 bd       	out	0x25, r24	; 37
	int OVFCount = 0;
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
			TCNT0 = 0;
		}
		
		while ((TIFR0 & 0x01) == 0);  
			
			TCNT0 = 0x05;			//starts at this value to count from
  96:	35 e0       	ldi	r19, 0x05	; 5
			TIFR0 = 0x01;			//rests the overflow flag
  98:	21 e0       	ldi	r18, 0x01	; 1
		{
			PORTB = (0<<2);          //then portb2 led is on
		}
		else 
		{
	    	PORTB = (1<<2);          //then portb2 led is off	
  9a:	44 e0       	ldi	r20, 0x04	; 4
	TCCR0B = (1<<CS02) | (1<<CS00);     //sets prescaler to 1024
	int OVFCount = 0;

	while (1)
	{
		if (!(PINC & (1<<PINC2)))    //checks if the pushbutton is pressed
  9c:	32 99       	sbic	0x06, 2	; 6
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <main+0x26>
		{
			OVFCount = 0;
			TCNT0 = 0;
  a0:	16 bc       	out	0x26, r1	; 38

	while (1)
	{
		if (!(PINC & (1<<PINC2)))    //checks if the pushbutton is pressed
		{
			OVFCount = 0;
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
			TCNT0 = 0;
		}
		
		while ((TIFR0 & 0x01) == 0);  
  a6:	a8 9b       	sbis	0x15, 0	; 21
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x26>
			
			TCNT0 = 0x05;			//starts at this value to count from
  aa:	36 bd       	out	0x26, r19	; 38
			TIFR0 = 0x01;			//rests the overflow flag
  ac:	25 bb       	out	0x15, r18	; 21
			OVFCount++;			   //overflow flag counter increment
  ae:	01 96       	adiw	r24, 0x01	; 1
		
		if (OVFCount <= 78)		   //when overflow counter is less than or equal to 78
  b0:	8f 34       	cpi	r24, 0x4F	; 79
  b2:	91 05       	cpc	r25, r1
  b4:	14 f4       	brge	.+4      	; 0xba <main+0x3a>
		{
			PORTB = (0<<2);          //then portb2 led is on
  b6:	15 b8       	out	0x05, r1	; 5
  b8:	f1 cf       	rjmp	.-30     	; 0x9c <main+0x1c>
		}
		else 
		{
	    	PORTB = (1<<2);          //then portb2 led is off	
  ba:	45 b9       	out	0x05, r20	; 5
  bc:	ef cf       	rjmp	.-34     	; 0x9c <main+0x1c>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
