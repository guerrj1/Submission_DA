
DA2CT2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a3  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000065  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	DDRB |= (1<<2);
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<2);
  82:	2a 9a       	sbi	0x05, 2	; 5
	//TCNT0 = 0x1D;
	TCNT0 = 0;
  84:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0;
  86:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1<<CS02) | (1 << CS00);
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37
	
	TIMSK0 |= (1<< TOIE0);
  8c:	ee e6       	ldi	r30, 0x6E	; 110
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	81 60       	ori	r24, 0x01	; 1
  94:	80 83       	st	Z, r24
	sei();
  96:	78 94       	sei
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x18>

0000009a <__vector_16>:
		
	}
}

ISR(TIMER0_OVF_vect)
{
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
	uint8_t OVFCount = 0;
  a4:	80 e0       	ldi	r24, 0x00	; 0
	
	while(1)
	{
		while((TIFR0 & 0x01) == 0);      //while flag is 0
		
		TCNT0 = 0x1D;                //starting counter for tcnt0
  a6:	3d e1       	ldi	r19, 0x1D	; 29
		TIFR0 = 0x01;                //resets the overflow flag
  a8:	21 e0       	ldi	r18, 0x01	; 1
		{
			PORTB ^= (1<<2);         //turns led off
		}
		else if(OVFCount == 49)      //overflow counter counts up to this
		{
			PORTB ^= (1<<2);       //keeps led on
  aa:	44 e0       	ldi	r20, 0x04	; 4
{
	uint8_t OVFCount = 0;
	
	while(1)
	{
		while((TIFR0 & 0x01) == 0);      //while flag is 0
  ac:	a8 9b       	sbis	0x15, 0	; 21
  ae:	fe cf       	rjmp	.-4      	; 0xac <__vector_16+0x12>
		
		TCNT0 = 0x1D;                //starting counter for tcnt0
  b0:	36 bd       	out	0x26, r19	; 38
		TIFR0 = 0x01;                //resets the overflow flag
  b2:	25 bb       	out	0x15, r18	; 21
		//OVFCount++;
		
		if(OVFCount == 19 )          //overflow counter counts up to this
  b4:	83 31       	cpi	r24, 0x13	; 19
  b6:	21 f4       	brne	.+8      	; 0xc0 <__vector_16+0x26>
		{
			PORTB ^= (1<<2);         //turns led off
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	94 27       	eor	r25, r20
  bc:	95 b9       	out	0x05, r25	; 5
  be:	06 c0       	rjmp	.+12     	; 0xcc <__vector_16+0x32>
		}
		else if(OVFCount == 49)      //overflow counter counts up to this
  c0:	81 33       	cpi	r24, 0x31	; 49
  c2:	21 f4       	brne	.+8      	; 0xcc <__vector_16+0x32>
		{
			PORTB ^= (1<<2);       //keeps led on
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	84 27       	eor	r24, r20
  c8:	85 b9       	out	0x05, r24	; 5
			OVFCount = 0;          //resets the overflow count
  ca:	80 e0       	ldi	r24, 0x00	; 0
		}
		OVFCount++;		            //increment overflow count
  cc:	8f 5f       	subi	r24, 0xFF	; 255
	}
  ce:	ee cf       	rjmp	.-36     	; 0xac <__vector_16+0x12>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
