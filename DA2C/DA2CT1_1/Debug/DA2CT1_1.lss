
DA2CT1_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068b  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000605  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023c  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

int main()
{
	uint8_t OVFCount = 0;                 //overflow flag counter
	DDRB |= (1<<2);                       //set pb2 as output
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<2);                      //led output
  82:	2a 9a       	sbi	0x05, 2	; 5
	TCNT0 = 0x1D;                         //starting counter
  84:	8d e1       	ldi	r24, 0x1D	; 29
  86:	86 bd       	out	0x26, r24	; 38
	TCCR0B = (1<<CS02) | (1 << CS00);     //sets prescaler to 1024
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37
#define F_CPU 16000000L
#include <avr/io.h>

int main()
{
	uint8_t OVFCount = 0;                 //overflow flag counter
  8c:	80 e0       	ldi	r24, 0x00	; 0
	
	while(1)
	{
		while((TIFR0 & 0x01) == 0);      //while flag is 0 
		
			TCNT0 = 0x1D;                //starting counter for tcnt0
  8e:	3d e1       	ldi	r19, 0x1D	; 29
			TIFR0 = 0x01;                //resets the overflow flag
  90:	21 e0       	ldi	r18, 0x01	; 1
			{ 
				PORTB ^= (1<<2);         //turns led off
			}
			else if(OVFCount == 49)      //overflow counter counts up to this
			{ 
				  PORTB ^= (1<<2);       //keeps led on
  92:	44 e0       	ldi	r20, 0x04	; 4
	TCNT0 = 0x1D;                         //starting counter
	TCCR0B = (1<<CS02) | (1 << CS00);     //sets prescaler to 1024
	
	while(1)
	{
		while((TIFR0 & 0x01) == 0);      //while flag is 0 
  94:	a8 9b       	sbis	0x15, 0	; 21
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x14>
		
			TCNT0 = 0x1D;                //starting counter for tcnt0
  98:	36 bd       	out	0x26, r19	; 38
			TIFR0 = 0x01;                //resets the overflow flag
  9a:	25 bb       	out	0x15, r18	; 21
			//OVFCount++; 
			
			if(OVFCount == 19 )          //overflow counter counts up to this
  9c:	83 31       	cpi	r24, 0x13	; 19
  9e:	21 f4       	brne	.+8      	; 0xa8 <main+0x28>
			{ 
				PORTB ^= (1<<2);         //turns led off
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	94 27       	eor	r25, r20
  a4:	95 b9       	out	0x05, r25	; 5
  a6:	06 c0       	rjmp	.+12     	; 0xb4 <main+0x34>
			}
			else if(OVFCount == 49)      //overflow counter counts up to this
  a8:	81 33       	cpi	r24, 0x31	; 49
  aa:	21 f4       	brne	.+8      	; 0xb4 <main+0x34>
			{ 
				  PORTB ^= (1<<2);       //keeps led on
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	84 27       	eor	r24, r20
  b0:	85 b9       	out	0x05, r24	; 5
				  OVFCount = 0;          //resets the overflow count
  b2:	80 e0       	ldi	r24, 0x00	; 0
			}
			OVFCount++;		            //increment overflow count 
  b4:	8f 5f       	subi	r24, 0xFF	; 255
	}
  b6:	ee cf       	rjmp	.-36     	; 0x94 <main+0x14>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
