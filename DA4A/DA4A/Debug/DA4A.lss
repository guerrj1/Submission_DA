
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000768  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a8  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030a  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bb  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c5  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	ADMUX = (1<<REFS0);	     //reference selection; AVcc
	ADCSRA |= (1<<ADEN) |    //enable ADC
	(1<<ADPS2) |   //prescalar 128
	(1<<ADPS1) |
	(1<<ADPS0);
	ADCSRB = 0x0;		     //adc control and status register free running mode
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	84 b9       	out	0x04, r24	; 4
  94:	17 b8       	out	0x07, r1	; 7
  96:	15 b8       	out	0x05, r1	; 5
  98:	e0 e8       	ldi	r30, 0x80	; 128
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	92 6a       	ori	r25, 0xA2	; 162
  a0:	90 83       	st	Z, r25
  a2:	e1 e8       	ldi	r30, 0x81	; 129
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	90 81       	ld	r25, Z
  a8:	9a 61       	ori	r25, 0x1A	; 26
  aa:	90 83       	st	Z, r25
  ac:	2f e0       	ldi	r18, 0x0F	; 15
  ae:	37 e2       	ldi	r19, 0x27	; 39
  b0:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b4:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  b8:	41 9a       	sbi	0x08, 1	; 8
  ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
  be:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
  c2:	78 94       	sei
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x34>

000000c6 <__vector_4>:
}

//interrupt
ISR(PCINT1_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	if(!(PINC & (1 << PINC1)))  //if pushbutton is pressed
  dc:	31 99       	sbic	0x06, 1	; 6
  de:	42 c0       	rjmp	.+132    	; 0x164 <__vector_4+0x9e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	81 ee       	ldi	r24, 0xE1	; 225
  e4:	94 e0       	ldi	r25, 0x04	; 4
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__vector_4+0x20>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__vector_4+0x2a>
  f0:	00 00       	nop
	{
		_delay_ms(100);	//delay for debouncing

		while(!(PINC & (1 << PINC1)));  //while button is pressed
  f2:	31 9b       	sbis	0x06, 1	; 6
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <__vector_4+0x2c>
		
		if(toggle == 1)
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	31 f5       	brne	.+76     	; 0x14a <__vector_4+0x84>
		{
			PORTB |= (1<<1);
  fe:	29 9a       	sbi	0x05, 1	; 5
			ADCSRA |= (1 << ADSC);			    // start adc conversion
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
			
			while((ADCSRA&(1<<ADIF))==0);	         // wait for conversion to finish
 10a:	80 81       	ld	r24, Z
 10c:	84 ff       	sbrs	r24, 4
 10e:	fd cf       	rjmp	.-6      	; 0x10a <__vector_4+0x44>
			
			ADCvalue = ADC & 0x03FF;		      	//read ADCH and ADCL
 110:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 114:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 118:	93 70       	andi	r25, 0x03	; 3
 11a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ADCvalue+0x1>
 11e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCvalue>
			OCR1A = 10*ADCvalue;				    //duty cycle for PWM
 122:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ADCvalue>
 126:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ADCvalue+0x1>
 12a:	9c 01       	movw	r18, r24
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	82 0f       	add	r24, r18
 13e:	93 1f       	adc	r25, r19
 140:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 144:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 148:	07 c0       	rjmp	.+14     	; 0x158 <__vector_4+0x92>
		}
		
		else if(toggle == 0)
 14a:	81 11       	cpse	r24, r1
 14c:	05 c0       	rjmp	.+10     	; 0x158 <__vector_4+0x92>
		{
			OCR1A = 0;
 14e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 152:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			PORTB &= ~(1<<1);
 156:	29 98       	cbi	0x05, 1	; 5
		}
		toggle ^= 1;   //xor toggling
 158:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	89 27       	eor	r24, r25
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
	}
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
